import React, { useEffect, useRef, useState } from 'react';
import './memoryLeak.css';

function Index() {
  const [log, setLog] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const infoRef = useRef(null);
  const intervalIdRef = useRef(null);

  useEffect(() => {
    return () => {
      clearInterval(intervalIdRef.current);
    };
  }, []);

  const addLog = (message) => {
    setLog((prev) => [
      ...prev,
      `${new Date().toLocaleTimeString()}: ${message}`,
    ]);
  };

  const clearLog = () => {
    setLog([]);
  };

  const handleMemoryStart = () => {
    window.testArray = [];
    if (!infoRef.current) {
        const container = document.getElementById('memory-info-container');
        if (container) {
          infoRef.current = document.createElement('div');
          infoRef.current.className = 'memory-info';
          container.appendChild(infoRef.current);
        } else {
          console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä memory-info-container –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      }
    intervalIdRef.current = setInterval(() => {
      for (let i = 0; i < 1000; i++) {
        window.testArray.push(new Date());
      }
      infoRef.current.textContent = `–°–æ–∑–¥–∞–Ω–æ ${window.testArray.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`;
    }, 500);

    addLog('‚úÖ –£—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏ –Ω–∞—á–∞–ª–∞—Å—å');
  };

  const handleMemoryStop = () => {
    clearInterval(intervalIdRef.current);

    if (infoRef.current && infoRef.current.parentNode) {
      infoRef.current.parentNode.removeChild(infoRef.current);
      infoRef.current = null;
    }

    if (window.testArray) {
      window.testArray = [];
    }

    addLog('üõë –£—Ç–µ—á–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞');
  };

  const handleMemoryClear = () => {
    if (window.testArray) {
      window.testArray.length = 0;
      addLog('üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞');
    }
  };

  const handleInputChange = (e) => {
    setInputValue(e.target.value);
    addLog(`üìù –í–≤–æ–¥: ${e.target.value}`);
  };

  const handleDebugClick = () => {
    addLog(
      'üêû Debug: –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ ‚Äî ' + (window.testArray?.length || 0)
    );
  };

  const handleFetchClick = () => {
    addLog('üåê –ò–º–∏—Ç–∏—Ä–æ–≤–∞–Ω fetch-–∑–∞–ø—Ä–æ—Å...');
    setTimeout(() => {
      addLog('üì¶ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!');
    }, 1000);
  };

  return (
    <main className="main">
      <div className="button-panel">
        <button onClick={handleMemoryStart}>–£—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏</button>
        <button onClick={handleMemoryStop}>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç–µ—á–∫—É</button>
        <button onClick={handleMemoryClear}>–û—á–∏—Å—Ç–∏—Ç—å</button>
        <input
          type="text"
          value={inputValue}
          onChange={handleInputChange}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å"
        />
        <button onClick={handleDebugClick}>Debugger</button>
        <button onClick={handleFetchClick}>Fetch</button>
        <button onClick={clearLog}>üóë –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥</button>
      </div>

      <div className="top-panel">
        <div id="memory-info-container"></div>
      </div>

      <div className="content-panel">
        <div className="log-box">
          <h3>üìú –õ–æ–≥:</h3>
          {log.map((entry, index) => (
            <div key={index}>{entry}</div>
          ))}
        </div>

        <div className="info-box">
          <h3>üîç –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:</h3>
          <table>
            <thead>
              <tr>
                <th>–≠–ª–µ–º–µ–Ω—Ç</th>
                <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>–£—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏</td>
                <td>–ö–∞–∂–¥—ã–µ 500 –º—Å —Å–æ–∑–¥–∞—ë—Ç 1000 –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç –æ–±—â–µ–µ —á–∏—Å–ª–æ</td>
              </tr>
              <tr>
                <td>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç–µ—á–∫—É</td>
                <td>–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä</td>
              </tr>
              <tr>
                <td>–û—á–∏—Å—Ç–∏—Ç—å</td>
                <td>–û–±–Ω—É–ª—è–µ—Ç –º–∞—Å—Å–∏–≤</td>
              </tr>
              <tr>
                <td>–ü–æ–ª–µ –≤–≤–æ–¥–∞</td>
                <td>–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤ –ª–æ–≥–∞—Ö, —á—Ç–æ —Ç—ã –≤–≤–æ–¥–∏—à—å</td>
              </tr>
              <tr>
                <td>Debugger</td>
                <td>–í—ã–≤–æ–¥–∏—Ç –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞</td>
              </tr>
              <tr>
                <td>Fetch</td>
                <td>–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π</td>
              </tr>
              <tr>
                <td>üóë –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥</td>
                <td>–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –æ–∫–Ω–æ –ª–æ–≥–æ–≤</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </main>
  );
}

export default Index;
